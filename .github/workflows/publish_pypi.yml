# Build and publish Python distribution package to TestPyPI and PyPI
name: Build and publish wheels

on:
  push:
    branches:
      - master
    tags:
      - v* # Push events to v* tags
  # pull_request:
  #   branches:
  #     - master
  # Manual run
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  # Build wheels for macOS, Linux, and Windows
  build_wheels:
    name: Wheel for ${{ matrix.os }}-cp${{ matrix.python }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Build the other wheels even if one fails
      fail-fast: false
      matrix:
        # os: [ubuntu-latest]
        # os: [ubuntu-18.04]
        os: [windows-latest]
        # os: [windows-latest, ubuntu-18.04, macos-latest]
        # os: [windows-latest, ubuntu-latest, macos-latest]
        python: [37] # [36, 37, 38, 39]

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.16.x'

      - name: Install boost on Windows
        uses: MarkusJx/install-boost@v2.1.0
        id: install-boost
        # id: install-boost-windows
        with:
          boost_version: 1.78.0
          platform_version: 2019
          toolset: msvc
        if: runner.os == 'Windows'

      # - name: Install boost on Linux
      #   uses: MarkusJx/install-boost@v2.1.0
      #   id: install-boost
      #   with:
      #     boost_version: 1.78.0
      #     platform_version: 20.04
      #     toolset: gcc
      #   if: runner.os == 'Linux'

      - name: Install libraries on Windows
        run: |
          vcpkg install eigen3
          vcpkg install gmp
          vcpkg integrate install
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Install the SDSL library on Windows
        run: |
          git clone https://github.com/simongog/sdsl-lite.git
          cd sdsl-lite
          ./install.sh
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Install libraries on Linux
        run: |
          curl --progress-bar -L -o boost_1_69_0.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.69.0/source/boost_1_69_0.tar.gz
          tar -xzf boost_1_69_0.tar.gz
          cd boost_1_69_0
          ./bootstrap.sh
          sudo ./b2 install -j4 --with-chrono --with-thread --with-serialization --with-date_time --with-atomic
          # git clone https://github.com/simongog/sdsl-lite.git
          # cd sdsl-lite
          # export CFLAGS=-fPIC
          # export CXXFLAGS=-fPIC
          # ./install.sh /usr/local/
          sudo apt-get update
          # sudo apt-get install libboost-all-dev
          sudo apt-get install libeigen3-dev
          sudo apt-get install libgmp-dev
          sudo apt-get install libsdsl3
          whereis boost
        shell: bash
        if: runner.os == 'Linux'

      # - name: Configure CMake
      #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      #   env:
      #     BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      # - name: Build
      #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheel
        run:
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp${{ matrix.python }}-*
          CIBW_ARCHS_WINDOWS: auto64
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          # CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
#          CIBW_ENVIRONMENT: BOOST_ROOT="${{ steps.install-boost.outputs.BOOST_ROOT }}"
#          CIBW_ENVIRONMENT: BOOST_INCLUDEDIR="${{ steps.install-boost.outputs.BOOST_ROOT }}/include"
#          CIBW_ENVIRONMENT_LINUX: Boost_ARCHITECTURE=-x64
          # CIBW_ENVIRONMENT: "BOOST_INCLUDE=${BOOST_ROOT}"
          # CIBW_ENVIRONMENT: Boost_INCLUDE_DIR=${BOOST_ROOT}/include

      # - name: Show files
      #   run: ls -lh wheelhouse
      #   shell: bash

      # - name: Verify clean directory
      #   run: git diff --exit-code
      #   shell: bash

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: wheelhouse/*.whl
